#include "tests-common.sb"

fun testLogicalAnd(u8 n)
{
    u8 a = 0;
    while(a < n)
    {
        u8 b = 0;
        while(b < n)
        {
            if(a && b)
            {
                putc('1');
            }
            else
            {
                putc(' ');
            }
            b += 1;
        }
        a += 1;
    }
    putc('\n');
}

fun testLogicalOr(u8 n)
{
    u8 a = 0;
    while(a < n)
    {
        u8 b = 0;
        while(b < n)
        {
            if(a || b)
            {
                putc('1');
            }
            else
            {
                putc(' ');
            }
            b += 1;
        }
        a += 1;
    }
    putc('\n');
}

fun testLogicalNotAnd(u8 n)
{
    u8 a = 0;
    while(a < n)
    {
        u8 b = 0;
        while(b < n)
        {
            if(!(a && b))
            {
                putc('1');
            }
            else
            {
                putc(' ');
            }
            b += 1;
        }
        a += 1;
    }
    putc('\n');
}

fun testLogicalNotOr(u8 n)
{
    u8 a = 0;
    while(a < n)
    {
        u8 b = 0;
        while(b < n)
        {
            if(!(a || b))
            {
                putc('1');
            }
            else
            {
                putc(' ');
            }
            b += 1;
        }
        a += 1;
    }
    putc('\n');
}

fun testComplexCondition(u8 n)
{
    u8 a = 0;
    while(a < n)
    {
        u8 b = 0;
        while(b < n)
        {
            u8 c = 0;
            while(c < n)
            {
                if(!a || (b && !c))
                {
                    putc('1');
                }
                else
                {
                    putc(' ');
                }
                c += 1;
            }

            b += 1;
        }
        a += 1;
    }

    putc('\n');
}

fun testConditionLoop(u8 n)
{
    u8 i = 0;
    while(!(i == n))
    {
        putc('1');
       
        i += 1;
    }

    putc('\n');
}

fun main()
{
    testLogicalAnd(5);
    testLogicalOr(5);
    testLogicalNotAnd(5);
    testLogicalNotOr(5);
    testComplexCondition(3);
    testConditionLoop(3);
    exit();
}
