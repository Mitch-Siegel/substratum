#include "tests-common.sb"

struct Vec3
{
    public u32 x;
    public u32 y;
    public u32 z;
}

enum Instruction {
    SetSize: Vec3,
    ScaleUp: u32,
    ScaleDown: u32, 
    Translate: Vec3,
    Print,
}

struct State{
    Vec3 size;
    Vec3 pos;
}

impl State {
    fun Print(self);

    public fun Init(self)
    {
        self.size.x = 1;
        self.size.y = 1;
        self.size.z = 1;
        self.pos.x = 0;
        self.pos.y = 0;
        self.pos.z = 0;
    }

    public fun DoInstruction(self, Instruction instructionToDo)
    {
        match(instructionToDo)
        {
            SetSize(size): 
                {
                    self.size.x = size.x;
                    self.size.y = size.y;
                    self.size.z = size.z;
                }
            ScaleUp(factor): 
                {
                    self.size.x *= factor;
                    self.size.y *= factor;
                    self.size.z *= factor;
                }
            ScaleDown(factor): 
                {
                    self.size.x /= factor;
                    self.size.y /= factor;
                    self.size.z /= factor;
                }
            Translate(vec): 
                {
                    self.pos.x += vec.x;
                    self.pos.y += vec.y;
                    self.pos.z += vec.z;
                }
            Print: { self.Print(); }
        }
    }

    fun Print(self)
    {
        printStr("Position:\n" as u8 *);
        printNum(self.pos.x, 1);
        printNum(self.pos.y, 1);
        printNum(self.pos.z, 1);
        printStr("Dimensions:\n" as u8 *);
        printNum(self.size.x, 1);
        printNum(self.size.y, 1);
        printNum(self.size.z, 1);
        putc('\n');
    }
}

fun testInstructions()
{
    State s;
    s.Init();
    Instruction i = Instruction::Translate { x = 1, y = 2, z = 3};
    Instruction printInstr = Instruction::Print{};
    s.DoInstruction(i);
    s.DoInstruction(printInstr);

    i = Instruction::ScaleUp{40};
    s.DoInstruction(i);
    s.DoInstruction(printInstr);

    i = Instruction::Translate{x = 15, y = 0, z = 11};
    s.DoInstruction(i);
    s.DoInstruction(printInstr);

    i = Instruction::ScaleDown{10};
    s.DoInstruction(i);
    s.DoInstruction(printInstr);
}

fun main()
{
    testInstructions();
    exit();
}