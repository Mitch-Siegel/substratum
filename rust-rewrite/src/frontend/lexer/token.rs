use std::fmt::Display;

#[derive(Clone, Debug)]
pub enum Token {
    U8,
    U16,
    U32,
    U64,
    I8,
    I16,
    I32,
    I64,
    SelfLower,
    SelfUpper,
    Reference,
    Mut,
    Plus,
    Minus,
    Star,
    FSlash,
    LThan,
    GThan,
    LThanE,
    GThanE,
    Equals,
    NotEquals,
    Assign,
    Mod,
    Fun,
    If,
    Else,
    Match,
    Pub,
    While,
    Struct,
    Enum,
    Impl,
    LParen,
    RParen,
    Arrow,
    FatArrow,
    LCurly,
    RCurly,
    Comma,
    Dot,
    Semicolon,
    Colon,
    Identifier(String),
    UnsignedDecimalConstant(usize),
    Eof,
}

impl PartialEq for Token {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (Token::U8, Token::U8) => true,
            (Token::U16, Token::U16) => true,
            (Token::U32, Token::U32) => true,
            (Token::U64, Token::U64) => true,
            (Token::I8, Token::I8) => true,
            (Token::I16, Token::I16) => true,
            (Token::I32, Token::I32) => true,
            (Token::I64, Token::I64) => true,
            (Token::SelfLower, Token::SelfLower) => true,
            (Token::SelfUpper, Token::SelfUpper) => true,
            (Token::Reference, Token::Reference) => true,
            (Token::Mut, Token::Mut) => true,
            (Token::Plus, Token::Plus) => true,
            (Token::Minus, Token::Minus) => true,
            (Token::Star, Token::Star) => true,
            (Token::FSlash, Token::FSlash) => true,
            (Token::LThan, Token::LThan) => true,
            (Token::GThan, Token::GThan) => true,
            (Token::LThanE, Token::LThanE) => true,
            (Token::GThanE, Token::GThanE) => true,
            (Token::Equals, Token::Equals) => true,
            (Token::NotEquals, Token::NotEquals) => true,
            (Token::Assign, Token::Assign) => true,
            (Token::Mod, Token::Mod) => true,
            (Token::Fun, Token::Fun) => true,
            (Token::If, Token::If) => true,
            (Token::Else, Token::Else) => true,
            (Token::Match, Token::Match) => true,
            (Token::While, Token::While) => true,
            (Token::Pub, Token::Pub) => true,
            (Token::Struct, Token::Struct) => true,
            (Token::Enum, Token::Enum) => true,
            (Token::Impl, Token::Impl) => true,
            (Token::LParen, Token::LParen) => true,
            (Token::RParen, Token::RParen) => true,
            (Token::Arrow, Token::Arrow) => true,
            (Token::FatArrow, Token::FatArrow) => true,
            (Token::LCurly, Token::LCurly) => true,
            (Token::RCurly, Token::RCurly) => true,
            (Token::Comma, Token::Comma) => true,
            (Token::Dot, Token::Dot) => true,
            (Token::Semicolon, Token::Semicolon) => true,
            (Token::Colon, Token::Colon) => true,
            (Token::Identifier(_), Token::Identifier(_)) => true,
            (Token::UnsignedDecimalConstant(_), Token::UnsignedDecimalConstant(_)) => true,
            (Token::Eof, Token::Eof) => true,
            _ => false,
        }
    }
}

impl Eq for Token {}

impl Token {
    pub fn name(&self) -> &str {
        match self {
            Self::U8 => "u8",
            Self::U16 => "u16",
            Self::U32 => "u32",
            Self::U64 => "u64",
            Self::I8 => "i8",
            Self::I16 => "i16",
            Self::I32 => "i32",
            Self::I64 => "i64",
            Self::SelfLower => "self",
            Self::SelfUpper => "Self",
            Self::Reference => "&",
            Self::Mut => "mut",
            Self::Plus => "+",
            Self::Minus => "-",
            Self::Star => "*",
            Self::FSlash => "/",
            Self::GThan => ">",
            Self::GThanE => ">=",
            Self::LThan => "<",
            Self::LThanE => "<=",
            Self::Equals => "==",
            Self::NotEquals => "!=",
            Self::Assign => "=",
            Self::Mod => "mod",
            Self::Fun => "fun",
            Self::If => "if",
            Self::Else => "else",
            Self::Match => "match",
            Self::While => "while",
            Self::Pub => "pub",
            Self::Struct => "struct",
            Self::Enum => "enum",
            Self::Impl => "impl",
            Self::LParen => "(",
            Self::RParen => ")",
            Self::Arrow => "->",
            Self::FatArrow => "=>",
            Self::LCurly => "{",
            Self::RCurly => "}",
            Self::Comma => ",",
            Self::Dot => ".",
            Self::Semicolon => ";",
            Self::Colon => ":",
            Self::Identifier(_) => "identifier",
            Self::UnsignedDecimalConstant(_) => "unsigned decimal constant",
            Self::Eof => "EOF",
        }
    }
}

impl Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::U8 => write!(f, "u8"),
            Self::U16 => write!(f, "u16"),
            Self::U32 => write!(f, "u32"),
            Self::U64 => write!(f, "u64"),
            Self::I8 => write!(f, "i8"),
            Self::I16 => write!(f, "i16"),
            Self::I32 => write!(f, "i32"),
            Self::I64 => write!(f, "i64"),
            Self::SelfLower => write!(f, "self"),
            Self::SelfUpper => write!(f, "Self"),
            Self::Reference => write!(f, "&"),
            Self::Mut => write!(f, "mut"),
            Self::Plus => write!(f, "+"),
            Self::Minus => write!(f, "-"),
            Self::Star => write!(f, "*"),
            Self::FSlash => write!(f, "/"),
            Self::GThan => write!(f, ">"),
            Self::GThanE => write!(f, ">="),
            Self::LThan => write!(f, "<"),
            Self::LThanE => write!(f, "<="),
            Self::Equals => write!(f, "=="),
            Self::NotEquals => write!(f, "!="),
            Self::Assign => write!(f, "="),
            Self::Mod => write!(f, "mod"),
            Self::Fun => write!(f, "fun"),
            Self::If => write!(f, "if"),
            Self::Else => write!(f, "else"),
            Self::Match => write!(f, "match"),
            Self::While => write!(f, "while"),
            Self::Pub => write!(f, "pub"),
            Self::Struct => write!(f, "struct"),
            Self::Enum => write!(f, "enum"),
            Self::Impl => write!(f, "impl"),
            Self::LParen => write!(f, "("),
            Self::RParen => write!(f, ")"),
            Self::Arrow => write!(f, "->"),
            Self::FatArrow => write!(f, "=>"),
            Self::LCurly => write!(f, "{{"),
            Self::RCurly => write!(f, "}}"),
            Self::Comma => write!(f, ","),
            Self::Dot => write!(f, "."),
            Self::Semicolon => write!(f, ";"),
            Self::Colon => write!(f, ":"),
            Self::Identifier(string) => write!(f, "Identifier({})", string),
            Self::UnsignedDecimalConstant(constant) => {
                write!(f, "UnsignedDecimalConstant({})", constant)
            }
            Self::Eof => write!(f, "EOF"),
        }
    }
}
