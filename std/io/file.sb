#include <file.sbh>
#include <stdout.sbh>

#define LINUX_O_RDONLY  00
#define LINUX_O_WRONLY  01
#define LINUX_O_RDWR    02
#define LINUX_RISCV_FSOPEN 430

fun linux_open(u8 *pathname, u32 mode) -> u32 asm
{
    addi sp, sp, -256
	sd ra, 0(sp)
	sd sp, 8(sp)
	sd gp, 16(sp)
	sd tp, 24(sp)
	sd t0, 32(sp)
	sd t1, 40(sp)
	sd t2, 48(sp)
	sd s0, 56(sp)
	sd s1, 64(sp)
	; sd a0, 72(sp) - we will return a value
	sd a1, 88(sp)
	sd a2, 96(sp)
	sd a3, 104(sp)
	sd a4, 112(sp)
	sd a5, 120(sp)
	sd a6, 128(sp)
	sd a7, 136(sp)
	sd s2, 144(sp)
	sd s3, 152(sp)
	sd s4, 160(sp)
	sd s5, 168(sp)
	sd s6, 176(sp)
	sd s7, 184(sp)
	sd s8, 192(sp)
	sd s9, 200(sp)
	sd s10, 208(sp)
	sd s11, 216(sp)
	sd t3, 224(sp)
	sd t4, 232(sp)
	sd t5, 240(sp)
	sd t6, 248(sp)

	t0 = readvar(pathname)
	t1 = readvar(mode)

	li a7, LINUX_RISCV_FSOPEN
	mv a0, t0
	mv a1, t1
	ecall

	ld ra, 0(sp)
	ld sp, 8(sp)
	ld gp, 16(sp)
	ld tp, 24(sp)
	ld t0, 32(sp)
	ld t1, 40(sp)
	ld t2, 48(sp)
	ld s0, 56(sp)
	ld s1, 64(sp)
	; ld a0, 72(sp) - we will return a value
	ld a1, 88(sp)
	ld a2, 96(sp)
	ld a3, 104(sp)
	ld a4, 112(sp)
	ld a5, 120(sp)
	ld a6, 128(sp)
	ld a7, 136(sp)
	ld s2, 144(sp)
	ld s3, 152(sp)
	ld s4, 160(sp)
	ld s5, 168(sp)
	ld s6, 176(sp)
	ld s7, 184(sp)
	ld s8, 192(sp)
	ld s9, 200(sp)
	ld s10, 208(sp)
	ld s11, 216(sp)
	ld t3, 224(sp)
	ld t4, 232(sp)
	ld t5, 240(sp)
	ld t6, 248(sp)
	addi sp, sp, 256
}

impl File
{
    public fun open_rdonly(String path) -> Self
    {
        u32 result = linux_open(path.contents().raw(), LINUX_O_RDONLY);
        if(result > 0x80000000)
        {
            Stdout::print_str(String::from_ascii("Bad return from open syscall: " as u8*));
            Stdout::print_hex(result);
        }

        return File {filedes = result};
    }

    public fun open_wronly(String path) -> Self
    {

    }

    public fun open_rdwr(String path) -> Self
    {

    }

    public fun read(self, Ptr::<u8> dst, u64 count) -> u64 // TODO: usize, isize
    {

    }

    public fun write(self, Ptr::<u8> src, u64 count) -> u64 // TODO: usize, isize
    {

    }

    fun close(self)
    {

    }
}
